#FROM nvidia/cuda:10.1-cudnn7-runtime-ubuntu16.04
FROM nvidia/cuda:10.0-cudnn7-runtime-ubuntu16.04

LABEL maintainer="Amazon AI"

# Specify accept-bind-to-port LABEL for inference pipelines to use SAGEMAKER_BIND_TO_PORT
# https://docs.aws.amazon.com/sagemaker/latest/dg/inference-pipeline-real-time.html
LABEL com.amazonaws.sagemaker.capabilities.accept-bind-to-port=true

ARG MMS_VERSION=1.0.8
ARG MX_URL=https://aws-mxnet-pypi.s3-us-west-2.amazonaws.com/1.6.0/aws_mxnet_cu101mkl-1.6.0-py2.py3-none-manylinux1_x86_64.whl
ARG PYTHON=python
ARG PYTHON_PIP=python-pip
ARG PIP=pip

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/lib:/usr/local/cuda-10.0/targets/x86_64-linux/lib" \
    PYTHONIOENCODING=UTF-8 \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    TEMP=/home/model-server/tmp \
    MMS_PRELOAD_MODEL=false \
    CUDAHOME=/usr/local/cuda-10.0 \
    PYTHONPATH="$PYTHONPATH:/usr/local/lib/protobuf_libs" \
    MXNET_CUDNN_AUTOTUNE_DEFAULT=0 \
    MXNET_ENABLE_GPU_P2P=0
    
RUN apt-get update \
 && apt-get -y install --no-install-recommends \
    build-essential \
    ca-certificates \
    curl \
    git \
    libopencv-dev \
    openjdk-8-jdk-headless \
    vim \
    wget \
    tree \
    lsof \
    netcat \
    net-tools \
    build-essential \
    nvidia-cuda-toolkit \
    zlib1g-dev \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

RUN apt-get update \
 && apt-get install -y \
    ${PYTHON} \
    ${PYTHON_PIP}

RUN ${PIP} --no-cache-dir install --upgrade pip
RUN ${PIP} --no-cache-dir install --upgrade setuptools

WORKDIR /

RUN ${PIP} install --no-cache-dir \
    # setuptools<45.0.0 because support for py2 stops with 45.0.0
    # https://github.com/pypa/setuptools/blob/master/CHANGES.rst#v4500
    "setuptools<45.0.0" \
    mxnet-model-server==$MMS_VERSION \
    keras-mxnet==2.2.4.1 \
    numpy==1.16.1 \
    onnx==1.4.1 \
    protobuf \
    Pillow \
    opencv-python \ 
    easydict \
    mxnet-cu100 \
    Cython \
    typing \
    "sagemaker-mxnet-inference<2"

# This is here to make our installed version of OpenCV work.
# https://stackoverflow.com/questions/29274638/opencv-libdc1394-error-failed-to-initialize-libdc1394
# TODO: Should we be installing OpenCV in our image like this? Is there another way we can fix this?
RUN ln -s /dev/null /dev/raw1394

RUN useradd -m model-server \
 && mkdir -p /home/model-server/tmp \
 && chown -R model-server /home/model-server \
 && mkdir -p /usr/local/lib/protobuf_libs \
 && mkdir -p /home/model-server/dcn

COPY dcn /home/model-server/dcn
COPY sv.jpg /home/model-server/dcn/sv.jpg

COPY mms-entrypoint.py /usr/local/bin/dockerd-entrypoint.py
COPY config.properties /home/model-server
COPY __init__.py /usr/local/lib/protobuf_libs
COPY image_pb2.py /usr/local/lib/protobuf_libs
COPY test-mxnet-gpu.py /home/model-server

RUN chmod +x /usr/local/bin/dockerd-entrypoint.py
RUN ln -sv /usr/lib/nvidia-cuda-toolkit/bin /usr/local/cuda-10.0/bin
RUN ln -sv /usr/local/cuda-10.0/targets/x86_64-linux/include /usr/local/cuda-10.0/include 

RUN cd /home/model-server/ && sh ./dcn/init.sh


RUN curl https://aws-dlc-licenses.s3.amazonaws.com/aws-mxnet-1.6.0/license.txt -o /license.txt

EXPOSE 8080 8081
ENTRYPOINT ["python", "/usr/local/bin/dockerd-entrypoint.py"]
CMD ["mxnet-model-server", "--start", "--mms-config", "/home/model-server/config.properties"]


#export CUDAHOME=/usr/local/cuda-10.0/
#cd /usr/local/cuda-10.0/ ln -sv /usr/lib/nvidia-cuda-toolkit/bin . 
# ln -sv /usr/local/cuda-10.0/targets/x86_64-linux/include . /usr/local/cuda-10.0/